@{
    ViewBag.Title = "Single Responsibility Principle";
}
<script src="https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js"></script>

<h2>Single Responsibility Principle</h2>

<div class="row">
    <div class="col-xs-3" id="myScrollspy">
        <ul class="nav nav-tabs nav-stacked affix-top" data-spy="affix" data-offset-top="125">
            <li class="active"><a href="#section-0">Definition</a></li>
            <li><a href="#section-1">Motivation</a></li>
            <li><a href="#section-2">Intent</a></li>
            <li><a href="#section-3">Example</a></li>
            <li><a href="#section-4">Conclusion</a></li>
        </ul>
    </div>
    <div class="col-xs-9">
        <h2 id="section-0">Definition</h2>
        <p>
            In object-oriented programming, the single responsibility principle states that every class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility.
        </p>
        <p>
            The term was introduced by Robert C. Martin in an article by the same name as part of his Principles of Object Oriented Design, made popular by his book Agile Software Development, Principles, Patterns, and Practices. Martin described it as being based on the principle of cohesion, as described by Tom DeMarco in his book Structured Analysis and Systems Specification.
        </p>
        <p>
            Martin defines a responsibility as a reason to change, and concludes that a class or module should have one, and only one, reason to change. As an example, consider a module that compiles and prints a report. Imagine such a module can be changed for two reasons. First, the content of the report could change. Second, the format of the report could change. These two things change for very different causes; one substantive, and one cosmetic. The single responsibility principle says that these two aspects of the problem are really two separate responsibilities, and should therefore be in separate classes or modules. It would be a bad design to couple two things that change for different reasons at different times.
        </p>
        <p>
            The reason it is important to keep a class focused on a single concern is that it makes the class more robust. Continuing with the foregoing example, if there is a change to the report compilation process, there is greater danger that the printing code will break if it is part of the same class.
        </p>
        <p>
            The responsibility is defined as a charge assigned to a unique actor to signify its accountabilities concerning a unique business task.
        </p>
        @Html.CreditLink("https://en.wikipedia.org/wiki/Single_responsibility_principle", "Wikipedia - Single Responsibility Principle")
        <br/><br/>
        @Html.Blockquote("Code that does one job, one job only, and one job very well.", "Harry Roberts, “The Smashing Book #4: New Perspectives on Web Design.")
        <hr>
        <h2 id="section-1">Motivation</h2>
        <p>In this context a responsibility is considered to be one reason to change. This principle states that if we have 2 reasons to change for a class, we have to split the functionality in two classes. Each class will handle only one responsibility and on future if we need to make one change we are going to make it in the class which handle it. When we need to make a change in a class having more responsibilities the change might affect the other functionality of the classes.</p>
        <p>The Single Responsibility Principle is a simple and intuitive principle, but in practice it is sometimes hard to get it right.</p>
        <hr>
        <h2 id="section-2">Intent</h2>
        <p>A class should have only one reason to change.</p>
        <hr>
        <h2 id="section-3">Example</h2>
        <p>Let's assume we need an object to keep an email message. We are going to use the IEmail interface from the below sample. At the first sight everything looks just fine. At a closer look we can see that our IEmail interface and Email class have 2 responsibilities (reasons to change). One would be the use of the class in some email protocols such as pop3 or imap. If other protocols must be supported the objects should be serialized in another manner and code should be added to support new protocols. Another one would be for the Content field. Even if content is a string maybe we want in the future to support HTML or other formats.</p>
        <p>If we keep only one class, each change for a responsibility might affect the other one:</p>
        <ul><li>Adding a new protocol will create the need to add code for parsing and serializing the content for each type of field.</li><li>Adding a new content type (like html) make us to add code for each protocol implemented.</li></ul>
        <pre class=prettyprint>
interface IEmail {
	public void setSender(String sender);
	public void setReceiver(String receiver);
	public void setContent(String content);
}
class Email implements IEmail {
	public void setSender(String sender) {// set sender; }
	public void setReceiver(String receiver) {// set receiver; }
	public void setContent(String content) {// set content; }
}
        </pre>
        <p>We can create a new interface and class called IContent and Content to split the responsibilities. Having only one responsibility for each class give us a more flexible design:</p>
        <ul><li>adding a new protocol causes changes only in the Email class.</li><li>adding a new type of content supported causes changes only in Content class.</li></ul>
        <pre class=prettyprint>
interface IEmail {
	public void setSender(String sender);
	public void setReceiver(String receiver);
	public void setContent(IContent content);
}
interface Content {
	public String getAsString(); // used for serialization
}
class Email implements IEmail {
	public void setSender(String sender) {// set sender; }
	public void setReceiver(String receiver) {// set receiver; }
	public void setContent(IContent content) {// set content; }
}
        </pre>
        <hr>
        <h2 id="section-4">Conclusion</h2>
        <p>The Single Responsibility Principle represents a good way of identifying classes during the design phase of an application and it reminds you to think of all the ways a class can evolve. A good separation of responsibilities is done only when the full picture of how the application should work is well understand.</p>
    </div>
    @Html.CreditLink("http://www.oodesign.com/single-responsibility-principle.html", "OODesign.com - Single Responsibility Principle")
</div>


<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>

